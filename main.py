import logging

from aiogram import Bot, Dispatcher, types
import ast
import os

from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from aiogram.utils import executor

logging.basicConfig(level=logging.INFO)
TOKEN = os.environ.get('TOKEN')
chat_id = os.environ.get('CHAT_ID')

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


def open_file():
    """
    –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è –∏–∑ —Ñ–∞–π–ª–∞
    :return: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏. –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.
    """
    try:
        with open('data.txt', 'r') as file:
            data = file.read()
            data_dict = ast.literal_eval(data)
            return data_dict
    except FileNotFoundError:
        return dict()


def message_lists():
    """
    –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–æ–≤
    :return: str
    """

    data_dict = open_file()

    if 'staff' not in data_dict:
        m_staff_list = '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç'
    else:
        m_staff_list = ", ".join(data_dict["staff"])

    if 'objects' not in data_dict:
        m_objects_list = '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç'
    else:
        m_objects_list = ", ".join(data_dict["objects"])

    return m_staff_list, m_objects_list


def add_data(user_message: types.Message, key: str) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–æ–∫
    :param user_message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param key: –∫–ª—é—á —Å–ª–æ–≤–∞—Ä—è –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫
    :return: None
    """

    user_data_list = user_message.text.split(', ')

    data_dict = open_file()

    for i_element in user_data_list:
        try:
            data_dict[key].append(i_element.title())
        except KeyError:
            data_dict[key] = [i_element.title()]

    with open('data.txt', 'w') as file:
        file.write(str(data_dict))


def delete_data(user_message: types.Message, key: str):
    """
    –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–ø–∏—Å–∫–∞
    :param user_message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param key: –∫–ª—é—á —Å–ª–æ–≤–∞—Ä—è –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫
    :return: –≤ —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–∫–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç str
    """
    try:
        if ',' not in user_message.text:
            user_data_list = user_message.text.split(', ')
        else:
            user_data_list = user_message.text.split(', ')

        data_dict = open_file()

        if len(user_data_list) != len(data_dict[key]):
            for i_element in user_data_list:
                data_dict[key].remove(i_element.title())
        else:
            data_dict.pop(key)

        with open('data.txt', 'w') as file:
            file.write(str(data_dict))

    except ValueError:
        return 'error'


def get_keyboard(data_dict: dict, key: str) -> list:
    """
    –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è inline-–∫–Ω–æ–ø–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞
    :param data_dict: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏
    :param key: –∫–ª—é—á —Å–ª–æ–≤–∞—Ä—è –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫
    :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
    """
    buttons = [types.InlineKeyboardButton(text=f'{i_element}', callback_data=f'{i_element}') for i_element in
               data_dict[key]]

    for i in range(0, len(buttons), 2):
        yield buttons[i: i + 2]


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    user_channel_status = await bot.get_chat_member(chat_id=chat_id, user_id=message.chat.id)

    # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if user_channel_status['status'] in ['creator', 'administrator']:

        kb = [
            [
                types.KeyboardButton(text="üìÅ–°–ø–∏—Å–∫–∏"),
                types.KeyboardButton(text="üöê–í—ã–µ–∑–¥—ã")
            ]
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer(
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_channel_status['user']['first_name']}üëã. –ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ –°—Ç–µ–ø–∞–Ω–æ–≤–Ω–∞. –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–±–æ—Ç.",
            reply_markup=keyboard)
    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç")


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
@dp.message_handler(commands=['help'])
async def process_start_command(message: types.Message):
    user_channel_status = await bot.get_chat_member(chat_id=chat_id, user_id=message.chat.id)
    if user_channel_status['status'] in ['creator', 'administrator']:
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Å–∞–¥–æ–≤–Ω–∏–∫–æ–≤ –∏ –æ–±—ä–µ–∫—Ç–æ–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–°–ø–∏—Å–∫–∏'.\n\n"
                             "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –≤—ã–µ–∑–¥–∞—Ö –≤ –≥—Ä—É–ø–ø—É –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–í—ã–µ–∑–¥—ã'.\n\n"
                             "–í–æ –≤—Ä–µ–º—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–ª–µ–¥—É–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ—è–≤–ª—è—é—â–∏–º—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è–º. "
                             "–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ –∫–Ω–æ–ø–∫–∞–º, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º, –¥–∞—Ç—ã, –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. "
                             "–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã, –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –∑–Ω–∞—á–æ–∫ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫ (–ø—É–≥–æ–≤–∏—Ü–∞) –∏ –≤—ã–±—Ä–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∫–Ω–æ–ø–∫—É. "
                             "–ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'. \n\n"
                             "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) - —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –æ–±—ä–µ–∫—Ç–∞—Ö.")

    else:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç")


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /—Å–ø–∏—Å–∫–∏
@dp.message_handler(text=["üìÅ–°–ø–∏—Å–∫–∏"])
async def lists(message: types.Message):
    staff_list, objects_list = message_lists()

    await message.answer(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ üßë‚Äçüåæ:\n{staff_list}\n\n"
                         f"–û–±—ä–µ–∫—Ç—ã üè†:\n{objects_list}")

    kb = [
        [
            types.KeyboardButton(text="–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏üßë‚Äçüåæ"),
            types.KeyboardButton(text="–û–±—ä–µ–∫—Ç—ãüè†")
        ],
        [
            types.KeyboardButton(text="‚Ü©–ú–µ–Ω—é")
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ ‚¨á", reply_markup=keyboard)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
@dp.message_handler(text=["–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏üßë‚Äçüåæ"])
async def staff(message: types.Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è —Å–ª–æ–≤–∞—Ä—è —Å –¥–∞–Ω–Ω—ã–º–∏, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    async with state.proxy() as data:
        data['key'] = 'staff'
        data['unique_string_1'] = '–∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ'
        data['unique_string_2'] = '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫'

    kb = [
        [
            types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å"),
            types.KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å")
        ],
        [
            types.KeyboardButton(text="–ù–∞–∑–∞–¥")
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚¨á", reply_markup=keyboard)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /–û–±—ä–µ–∫—Ç—ã
@dp.message_handler(text=["–û–±—ä–µ–∫—Ç—ãüè†"])
async def objects(message: types.Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è —Å–ª–æ–≤–∞—Ä—è —Å –¥–∞–Ω–Ω—ã–º–∏, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    async with state.proxy() as data:
        data['key'] = 'objects'
        data['unique_string_1'] = '–Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π'
        data['unique_string_2'] = '–æ–±—ä–µ–∫—Ç'

    kb = [
        [
            types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å"),
            types.KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å")
        ],
        [
            types.KeyboardButton(text="–ù–∞–∑–∞–¥")
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚¨á", reply_markup=keyboard)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /–ù–∞–∑–∞–¥
@dp.message_handler(text=["–ù–∞–∑–∞–¥"])
async def back(message: types.Message, state: FSMContext):
    kb = [
        [
            types.KeyboardButton(text="–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏üßë‚Äçüåæ"),
            types.KeyboardButton(text="–û–±—ä–µ–∫—Ç—ãüè†")
        ],
        [
            types.KeyboardButton(text="‚Ü©–ú–µ–Ω—é")
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ ‚¨á", reply_markup=keyboard)

    await state.finish()


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /–ú–µ–Ω—é
@dp.message_handler(text=["‚Ü©–ú–µ–Ω—é"])
async def menu(message: types.Message, state: FSMContext):
    kb = [
        [
            types.KeyboardButton(text="üìÅ–°–ø–∏—Å–∫–∏"),
            types.KeyboardButton(text="üöê–í—ã–µ–∑–¥—ã")
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)

    await state.finish()


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /–î–æ–±–∞–≤–∏—Ç—å, /–£–¥–∞–ª–∏—Ç—å
@dp.message_handler(text=["–î–æ–±–∞–≤–∏—Ç—å", "–£–¥–∞–ª–∏—Ç—å"])
async def add_delete_data(message: types.Message, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –≤—ã–≥—Ä—É–∑–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    async with state.proxy() as data:
        data['action'] = message.text

        unique_string_1 = data['unique_string_1']
        unique_string_2 = data['unique_string_2']

    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ {unique_string_1} —Ö–æ—Ç–∏—Ç–µ {message.text.lower()}. '
                         f'–ï—Å–ª–∏ {unique_string_2} –Ω–µ –æ–¥–∏–Ω, –≤–≤–µ–¥–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:')


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /–í—ã–µ–∑–¥—ã
@dp.message_handler(text=["üöê–í—ã–µ–∑–¥—ã"])
async def update_num_text(message: types.Message):
    staff_list, objects_list = message_lists()

    if staff_list == '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç':
        kb = [
            [
                types.KeyboardButton(text="üìÅ–°–ø–∏—Å–∫–∏"),
                types.KeyboardButton(text="üöê–í—ã–µ–∑–¥—ã")
            ]
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer("–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.", reply_markup=keyboard)

    elif objects_list == '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç':
        kb = [
            [
                types.KeyboardButton(text="üìÅ–°–ø–∏—Å–∫–∏"),
                types.KeyboardButton(text="üöê–í—ã–µ–∑–¥—ã")
            ]
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer("–°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø—É—Å—Ç", reply_markup=keyboard)

    else:
        kb = [
            [
                types.KeyboardButton(text="üìÜ–î–∞—Ç–∞"),
                types.KeyboardButton(text="‚Ü©–ú–µ–Ω—é")
            ]
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚¨á", reply_markup=keyboard)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /–î–∞—Ç–∞
@dp.message_handler(text=["üìÜ–î–∞—Ç–∞"])
async def update_num_text(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['action'] = 'date'

    kb = [
        [
            types.KeyboardButton(text="üßë‚Äçüåæ–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"),
            types.KeyboardButton(text="‚Ü©–ú–µ–Ω—é")
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç:', reply_markup=keyboard)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ (–ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–µ–∑–¥–µ)
@dp.message_handler(text=["üßë‚Äçüåæ–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"])
async def staff_list(message: types.Message, state: FSMContext):
    kb = [
        [
            types.KeyboardButton(text="üè†–û–±—ä–µ–∫—Ç—ã"),
            types.KeyboardButton(text="‚Ü©–ú–µ–Ω—é")
        ]
    ]

    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("–í—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", reply_markup=keyboard)

    data_dict = open_file()

    buttons = get_keyboard(data_dict, 'staff')

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    keyboard.add(types.InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='finish'))

    await message.answer('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:', reply_markup=keyboard)

    async with state.proxy() as data:
        data['key'] = 'staff'


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /–û–±—ä–µ–∫—Ç—ã (–ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–µ–∑–¥–µ)
@dp.message_handler(text=["üè†–û–±—ä–µ–∫—Ç—ã"])
async def object_list(message: types.Message, state: FSMContext):
    kb = [
        [
            types.KeyboardButton(text="üïó–í—Ä–µ–º—è"),
            types.KeyboardButton(text="‚Ü©–ú–µ–Ω—é")
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("–í—ã–±–æ—Ä –æ–±—ä–µ–∫—Ç–∞", reply_markup=keyboard)

    data_dict = open_file()

    buttons = get_keyboard(data_dict, 'objects')

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    keyboard.add(types.InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='finish'))

    await message.answer('–û–±—ä–µ–∫—Ç—ã:', reply_markup=keyboard)

    async with state.proxy() as data:
        data['key'] = 'objects'


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /–í—Ä–µ–º—è
@dp.message_handler(text=["üïó–í—Ä–µ–º—è"])
async def time(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['action'] = 'time'

    kb = [
        [
            types.KeyboardButton(text="üìã–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
            types.KeyboardButton(text="‚úâ–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
        ],
        [
            types.KeyboardButton(text="‚Ü©–ú–µ–Ω—é")
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("–í–æ —Å–∫–æ–ª—å–∫–æ —Å–±–æ—Ä?", reply_markup=keyboard)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /–î–æ–ø.–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
@dp.message_handler(text=["üìã–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"])
async def staff_list(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['action'] = 'comment'

    kb = [
        [
            types.KeyboardButton(text="‚úâ–û—Ç–ø—Ä–∞–≤–∏—Ç—å"),
            types.KeyboardButton(text="‚Ü©–ú–µ–Ω—é")
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:', reply_markup=keyboard)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /–û—Ç–ø—Ä–∞–≤–∏—Ç—å
@dp.message_handler(text=["‚úâ–û—Ç–ø—Ä–∞–≤–∏—Ç—å"])
async def staff_list(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        st = data['staff']
        ob = data['objects']

    # –∫–æ–Ω—Ç—Ä–æ–ª—å –≤–≤–æ–¥–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    if 'date' not in data:
        async with state.proxy() as data:
            data['action'] = 'date'

        kb = [
            [
                types.KeyboardButton(text="‚úâ–û—Ç–ø—Ä–∞–≤–∏—Ç—å"),
                types.KeyboardButton(text="‚Ü©–ú–µ–Ω—é")
            ]
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer('–ó–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É:', reply_markup=keyboard)

    elif 'time' not in data:
        async with state.proxy() as data:
            data['action'] = 'time'

        kb = [
            [
                types.KeyboardButton(text="‚úâ–û—Ç–ø—Ä–∞–≤–∏—Ç—å"),
                types.KeyboardButton(text="‚Ü©–ú–µ–Ω—é")
            ]
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer('–ó–∞–±—ã–ª–∏ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è —Å–±–æ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è:', reply_markup=keyboard)

    else:
        date = data['date']
        tm = data['time']

        kb = [
            [
                types.KeyboardButton(text="‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"),
                types.KeyboardButton(text="‚Ü©–ú–µ–Ω—é")
            ]
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
        await message.answer('–í—Å–µ –≤–µ—Ä–Ω–æ?', reply_markup=keyboard)

        # –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏/–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if 'comment' in data:
            com = data['comment']

            text_message = f"–î–∞—Ç–∞: {date}\n\n" \
                           f"–ë—Ä–∏–≥–∞–¥–∞: {', '.join(st)}\n\n" \
                           f"–û–±—ä–µ–∫—Ç: {', '.join(ob)}\n\n" \
                           f"–°–±–æ—Ä —É —Å–∫–ª–∞–¥–∞: –≤ {tm}\n\n" \
                           f"–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {com}"

            async with state.proxy() as data:
                data['message'] = text_message

            await message.answer(text_message, reply_markup=keyboard)

        else:
            text_message = f"–î–∞—Ç–∞: {date}\n\n" \
                           f"–ë—Ä–∏–≥–∞–¥–∞: {', '.join(st)}\n\n" \
                           f"–û–±—ä–µ–∫—Ç: {', '.join(ob)}\n\n" \
                           f"–°–±–æ—Ä —É —Å–∫–ª–∞–¥–∞: –≤ {tm}"

            async with state.proxy() as data:
                data['message'] = text_message

            await message.answer(text_message, reply_markup=keyboard)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É)
@dp.message_handler(text=["‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"])
async def staff_list(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        text_message = data['message']

    await bot.send_message(chat_id=chat_id, text=text_message)

    kb = [
        [
            types.KeyboardButton(text="üìÅ–°–ø–∏—Å–∫–∏"),
            types.KeyboardButton(text="üöê–í—ã–µ–∑–¥—ã")
        ]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", reply_markup=keyboard)

    await state.finish()


# –•—ç–Ω–¥–ª–µ—Ä inline-–∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler()
async def callbacks_num(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        key = data['key']
        try:
            data_list = data[key]
        except KeyError:
            data_list = list()

    if callback.data != 'finish':
        data_list.append(callback.data)
        async with state.proxy() as data:
            data[key] = data_list

    else:
        async with state.proxy() as data:
            data_list = data[key]

        await callback.message.edit_text(f"{', '.join(data_list)}")


# –•—ç–Ω–¥–ª–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler()
async def user_data(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            action = data['action']

        # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–≤–æ–¥–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–µ–∑–¥–µ)
        if action == 'comment' or action == 'date' or action == 'time':
            async with state.proxy() as data:
                data[action] = message.text

        elif action == '–î–æ–±–∞–≤–∏—Ç—å':
            async with state.proxy() as data:
                key = data['key']

            add_data(message, key)

            await state.finish()

        elif action == '–£–¥–∞–ª–∏—Ç—å':
            async with state.proxy() as data:
                key = data['key']

            error = delete_data(message, key)

            # –∫–æ–Ω—Ç—Ä–æ–ª—å –≤–≤–æ–¥–∞
            if error == 'error':
                await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥')

            await state.finish()

        if action == '–î–æ–±–∞–≤–∏—Ç—å' or action == '–£–¥–∞–ª–∏—Ç—å':
            kb = [
                [
                    types.KeyboardButton(text="–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏üßë‚Äçüåæ"),
                    types.KeyboardButton(text="–û–±—ä–µ–∫—Ç—ãüè†")
                ],
                [
                    types.KeyboardButton(text="‚Ü©–ú–µ–Ω—é")
                ]
            ]
            keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

            staff_list, objects_list = message_lists()

            await message.answer(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ üßë‚Äçüåæ:\n{staff_list}\n\n"
                                 f"–û–±—ä–µ–∫—Ç—ã üè†:\n{objects_list}\n\n", reply_markup=keyboard)

    except KeyError:
        await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥')


if __name__ == "__main__":
    executor.start_polling(dp)

